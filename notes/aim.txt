This is a side project that will eventually be rolled into my modular ECS game engine. My lack of experience with ECS made me want to attempt
to create a small standalone game using those concepts. 

Goal: A text based adventure game organized in an ECS fashion.
    Load/Store a grouping of Entities with certain components
    Main event cycles through the different Systems every tick.
    Those systems apply updates to inidivual components 
    
    Game should take end user input via certain commands.


Resources:
    Rust Conference Talk https://kyren.github.io/2018/09/14/rustconf-talk.html
    Tiny ECS rust Pattern https://ianjk.com/ecs-in-rust/

23-10-2021
    Read through both Resources to see examples of ECS being used with Rust

    Gather Information on how to store loaded Entities and Components

27-10-2021
    I've gotten my storage system based on an example system implemented. I can now store components and Entities
    and run systems iterating on the available data.

    Now I need to take in input and edit the individual components. I also need to edit on entities that contain specifically 2 components

    Update, we are now able to edit individual components/entites based on user input

    TODO:
    Need to implement a trait for components to return the internal 
        core::option::Option<core::cell::RefMut<alloc::vec::Vec<core::option::Option<ecs_small::Component>>>>
    
    Need to convert it to 
        &mut ecs_small::Component

28-10-2021
    Looking over Bevy to see how it handles input and it's not too different from how I am currently handling input.
    The initiation of the class takes the keyboard input and the game state to edit the player (which is part of the game world)

    Remove LocationComponent from PlayerComponent thats some real object oriented thinking that won't function

    Side Note: What if I require unqiue entities? As in there can only be one player? Something to keep thinking about.

    For processing input string, I can prepare a list of enums
        // Pseudo-Code
        input = input.split(" ")
        for command in command_enum {
            if (input.contains(command.to_string())) {
                return command; //Then I could match on the command to figure out which second command to use
            }
        }

3-11-21
    Tasks:
        Iterate through the supplied text, confirm if its one of the enumerated command
            Confirm if it's one of the three enumerations
                ignore or throw warning?
            branch off to a separate function if it's one of the them
            How do I want to prepare the arguments to pass along? 
                A vector of strings for now

4-11-21
    I got a decent system in place to read in and parse input into requiste commands. I see a few branches I could walk today
    Commands:
        Use - Create an inventory of items for the player to hold 
        Check - Map out the world and write up quick synopsis of what is in every lay out 
            Hardcode the data or read it in?
                Reading it in would be the more interesting way of doing things
                Create a txt file, read it in at Startup
                World will contain a Map
                    Note: Add bounds that should be respected for Move-<DIRECTION>
        Help - Could be made at the end to explain the different commands

6-11-21
    I created a parser for the LocationComponent, which was surprisingly more difficult than 
    anticipated, and a file parser so I can create the entire text based map from a text file.
    
    There are currently no checks to make sure it's structured correctly other than outright failing
    thanks to the unwrap() method.

    Add check command to look at any information at the area, may need to store the Map components
    as more than a HashMap of LocationComponent -> String considering I may want different outcomes
    based on which command is assigned to which tile

    Does that put all the game logic into the map component or can I have separate files that will reuse
    similar code?
        Player-Map -> Checks an area
        Player-Use -> Check if an item can be used at a certain area

    this is all still new to me but I am currently satisfied with the progress I am making

7-11-21
    There seems to be some disagreement between where the file is located on linux and windows.
    It's probably worth taking the time to find out how to properly store resources in a rust project

    Potential Tasks
        - Create a list of items and the "Use" Struct for the player
            - Need to create the world and "plot" for this to take effect
        - Pass "World" into the handle player movement so it has the proper components
        - Create the Map with the different entries for the locations

9-11-21
    Updated the Check to include what you want to check the gernal area or your inventory
    I still need to create the map however I did create the boundaries the player can move in (Hard Coded)

    Today I will store Items in the Map data
        Will that require additional information in the HashMap of the data?
        After an item is taken, overwrite the "area" hashmap value to indicate the new information

    Player now checks area to see if there is an item there

10-11-21
    Add the inventory struct

    Create the item enum

11-11-21
    To avoid writing any story or figuring out how I am going to set up the item usage I've decided to create a timer to ensure the
    game doesn't drag on unnecessarily.

    Adding a timer in will hide the sheer lack of content
23-11-21
    I have spent some time study separate from working on this small project, however I feel the need to wrap this up and progress toward my
    larger goal

    Goals:
        - Populate the player map with information - DONE (Albeit rough)
        - Display the player map information after doing a "Move" - DONE
24-11-21
    Need a better way to organize my TODOs rather than leave them sprinkled throughout the code

    Goal:
        - Make Door Component that checks whenever the user is in the correct location and has used an item
        - Process commands outside the update Player system as more systems will use them
        TODO: Don't display the location data if the user is pushing against the edge of the map
12-12-21
    Worked on other projects recently and took a break from this one, as it's more of a side project that I hope to learn things from.
    I do want to wrap this up and pass it on to someone else in order to get feedback and consider it done. 

15-12-21
    Dedicating a small amount of time to not display messages when the boundaries are hit

    Typically with ECS games the componets would be:

        Input
        Physics
        Entity Logic
        Renderer
        Audio

    I needed to take a step back and write this out as I wasn't seeing the picture, referring to entities sharing data in 
    similar systems. 

    The game is consisting of acquiring input and handling entity logic. The main thing to separate here is that currently each entity
    outputs it's own statement. In this structure of things that would be part of the render step so I had to do some workarounds and 
    checks to make it function.

    Separate out the "Renderer" from the Entity Logic. This is where the edge cases and annoying bugs are coming from.

    How do I want to store the "Renderer" data?

16-12-21
    Wrapped up entity logic system to now return the output which  will be "Rendered" need to walk through it and ensure that there isn't an overlap of strings

    In a typical game engine each component will be rendered in space with a Z value (or 3D position) which will determine what is in front of each other, do I require
    each component to have its own text to render and then determine a priority level for what is in front of the other? 

    If I pass a pointer to a string as a mutable reference into a function
    then within that function append data to that Heap memory the pointer points to
    when the function exits that heap memory seems to be deallocated

    Going to ask the rust discord for assistance trying to debug this one. I need to know why heap memory is contained to the lifetime of the function
