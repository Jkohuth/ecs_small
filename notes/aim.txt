This is a side project that will eventually be rolled into my modular ECS game engine. My lack of experience with ECS made me want to attempt
to create a small standalone game using those concepts. 

Goal: A text based adventure game organized in an ECS fashion.
    Load/Store a grouping of Entities with certain components
    Main event cycles through the different Systems every tick.
    Those systems apply updates to inidivual components 
    
    Game should take end user input via certain commands.


Resources:
    Rust Conference Talk https://kyren.github.io/2018/09/14/rustconf-talk.html
    Tiny ECS rust Pattern https://ianjk.com/ecs-in-rust/

23-10-2021
    Read through both Resources to see examples of ECS being used with Rust

    Gather Information on how to store loaded Entities and Components

27-10-2021
    I've gotten my storage system based on an example system implemented. I can now store components and Entities
    and run systems iterating on the available data.

    Now I need to take in input and edit the individual components. I also need to edit on entities that contain specifically 2 components

    Update, we are now able to edit individual components/entites based on user input

    TODO:
    Need to implement a trait for components to return the internal 
        core::option::Option<core::cell::RefMut<alloc::vec::Vec<core::option::Option<ecs_small::Component>>>>
    
    Need to convert it to 
        &mut ecs_small::Component

28-10-2021
    Looking over Bevy to see how it handles input and it's not too different from how I am currently handling input.
    The initiation of the class takes the keyboard input and the game state to edit the player (which is part of the game world)

    Remove LocationComponent from PlayerComponent thats some real object oriented thinking that won't function

    Side Note: What if I require unqiue entities? As in there can only be one player? Something to keep thinking about.

    For processing input string, I can prepare a list of enums
        // Pseudo-Code
        input = input.split(" ")
        for command in command_enum {
            if (input.contains(command.to_string())) {
                return command; //Then I could match on the command to figure out which second command to use
            }
        }